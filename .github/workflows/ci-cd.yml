name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-arphic-ukai

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Format Python code
      run: |
        pip install black
        black backend

    - name: Commit formatted code
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff-index --quiet HEAD || git commit -m "Auto-format Python code"

    - name: Create .flake8 config
      run: |
        echo "[flake8]" > .flake8
        echo "max-line-length = 88" >> .flake8
        echo "extend-ignore = E203, W503" >> .flake8

    - name: Run Python linter
      run: |
        pip install flake8
        flake8 backend

    - name: Run Python tests
      run: |
        cd backend
        python -m unittest discover tests

    - name: Run Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Run JavaScript linter
      run: |
        cd frontend
        npm run lint

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    - name: Build Electron app
      run: |
        cd frontend
        npm run dist

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: frontend/dist

    - name: Publish to GitHub Releases
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        npx electron-builder --publish always

    - name: Run security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Bump version and push tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        npm version patch
        git push --follow-tags

    - name: Push changes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}